syntax = "proto3";
package worker;
option java_package = "worker";
option java_outer_classname = "WorkerMessages";
import "google/protobuf/timestamp.proto";

// The Blockchain service definition.
service TransactionService {
  rpc checkImageCount (ImageCountRequest) returns (ImageCountResponse){}

  rpc validateTransaction (ValidateTransactionRequest) returns (ValidateTransactionResponse){}

  // Sends a transaction to the node.
  rpc submitTransactions (TransactionRequest) returns (TransactionResponse) {}

  // Retrieves a block's information.
  rpc getBlockInfo (BlockInfoRequest) returns (BlockInfoResponse) {}

  // Registers a new node in the network.
  rpc registerNode (NodeRequest) returns (NodeResponse) {}

  // Broadcasts a new block to other nodes.
  rpc broadcastBlock (Block) returns (BroadcastResponse) {}

  // Synchronizes the blockchain when a new node registers.
  rpc syncBlockchain (SyncRequest) returns (SyncResponse) {}
}

// The request message containing the image details.
message ImageCountRequest {
  string imageId = 1;
}

// The request message containing the image count.
message ImageCountResponse {
  string imageId = 1;
  int32 imageCount = 2;
}

message ValidateTransactionRequest {
  int64 userId = 1;
  string imageId = 2;
}

message ValidateTransactionResponse {
  bool isValid = 1;
}

// The message for a list of transactions
message TransactionRequest {
  repeated ProtoTransaction transactions = 1;
}

// New message for a single transaction
message ProtoTransaction {
  int64 userId = 1;
  string imageId = 2;
  google.protobuf.Timestamp timestamp = 3;
}
// The response message for a transaction request.
message TransactionResponse {
  bool status = 1;
  string detail = 2;
}

// The request message for block information.
message BlockInfoRequest {
  int32 sequenceNo = 1;
}

// The response message containing block information.
message BlockInfoResponse {
  int32 sequenceNo = 1;
  string hash = 2;
  string previousHash = 3;
  int32 nonce = 4;
  TransactionRequest transaction = 5;
}

// A message representing a block.
message Block {
  int32 sequenceNo = 1;
  string hash = 2;
  string previousHash = 3;
  int32 nonce = 4;
  TransactionRequest transaction = 5;
}

// The request message for node registration.
message NodeRequest {
  string nodeId = 1;
}

// The response message for node registration.
message NodeResponse {
  string status = 1;
}

// The response message for broadcasting a block.
message BroadcastResponse {
  string status = 1;
}

// The request message for syncing the blockchain.
message SyncRequest {
  string nodeId = 1;
}

// The response message containing the current state of the blockchain.
message SyncResponse {
  repeated Block blocks = 1;
}
