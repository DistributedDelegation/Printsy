type CartResult {
    productResult: ProductResult
    userId: ID
    expirationTime: String
}

type ProductResult {
    imageId: ID
    imageUrl: String
    stockId: ID
    price: Int
}

type Product {
    productId: ID
    imageId: ID!
    stockId: ID
    price: Int
}

type CartItemTask {
    userId: ID!
    productId: ID!
    imageId: ID!
}

type TransactionInput {
    userId: ID!
    productId: ID!
    imageId: ID!
}

type Query {
    findImageAvailability(imageId: ID!): Boolean    # TransactionGateway
    findImageByImageId(imageId: ID!): Int           # MySQL
    findCartItemsByUserId(userId: ID!): [CartResult]
    findProductById(productId: ID!): ProductResult
    findAllProducts: [ProductResult]

    getRemainingCleanupTime(userId: ID!): Int
    peekQueue: CartItemTask
    checkCartProductsByUserId(userId: ID!): [ProductResult]

    findCartItemsByUserIdForPurchase(userId: ID!): [CartResult]
}

type Mutation {
    deleteCartItemsByUserId(userId: ID!): String
    
    addItemtoCart(imageId: ID!, stockId: ID!, price: Int!, userId: ID!): String

    completePurchase(userId: ID!): Boolean
}